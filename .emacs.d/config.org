#+TITLE: Emacs configuration
#+DATE:
#+AUTHOR:
#+STARTUP: indent

Custom =org-mode= file to load Emacs configurations.

* Utility functions
For custom-made functions
** TODO Org-ref sort all citations by date
:OUTLINE:
1. Move point to beginning of the document
2. Search for the string =cite:=
3. Move point to that string.
4. Execute the command =org-ref-sort-citation-link=.
5. Repeat steps 2-4 until the end of the document.
:END:
#+BEGIN_SRC emacs-lisp
;  (defun org-ref-sort-citations ()	; Define a function
;    "Sort all citations in an org document by date using org-ref" ;
;   (push-mark) ; Save the current location so 'pop-global-mark' can return here
;    (goto-char 0)				; Start at the top of the file
;    (when (regexp-quote "cite:") ; Checks if it is true that the string "cite:" exists...
;      ((re-search-forward "cite:") ; Go to the first occurrence of a citation
;       (org-ref-sort-citation-links)) ; Sort citations oldest to newest using org-ref
					  ; "When" will continue to next occurrence of "cite:" until false

;      (t "Done")))      ; If there are no more occurrences, print "Done"



  ;If regexp search match "cite:" is true,
  ;goto next occurrence and execute org-ref command
  ;
  ;else,
  ;return to push-mark

#+END_SRC
** Miscellaneous
#+BEGIN_SRC emacs-lisp
  ;; Create test files in specific programming languages
  (defun zdm-create-py-test ()
    "Create blank python file"
    (interactive)
    (find-file "~/Programming/Python/Scripts/test.py"))

  (defun zdm-create-R-test ()
    "Create blank python file"
    (interactive)
    (find-file "~/Programming/R/Scripts/test.R"))


  (defun zdm-pdb ()
    "Quickly load realgud if it hasn't been already, enter pdb"
    (interactive)
    (when (require 'realgud nil 'noerror)
      (load-library "realgud")
      (realgud:pdb))
    )

  (defun zdm-insert-literal-space ()
    "Insert UTF-8 literal space for LaTeX after in-sentence periods."
    (interactive)
    (if (> emacs-major-version 25)
        (insert (char-from-name "NON-BREAKING SPACE"))  ; Emacs 25
      (insert (cdr (assoc "NON-BREAKING SPACE" (ucs-names))))  ; Emacs 26
      )
    )

  (defun zdm-org-insert-word-definition ()
    (interactive)
    (save-excursion
      (setq word-definition
            (shell-command-to-string
             (concat "dict "
                     (thing-at-point 'word))))
      (org-end-of-line)
      (org-return)
      (insert word-definition)))

  (defun zdm-dired-copy-path-at-point ()
    "Yank absolute path to file at point in dired."
      (interactive)
      (dired-copy-filename-as-kill 0))

  (define-key dired-mode-map (kbd "W") 'zdm-dired-copy-path-at-point)

  (defun zdm-kill-buffer-other-window ()
    "Kill buffer in other window without leaving current window."
    (interactive)
    (other-window 1)
    (kill-buffer)
    (other-window 1))

  (define-key global-map (kbd "C-x C-k o") 'zdm-kill-buffer-other-window)

  (defun zdm-swap-windows ()
    "Swap positions of buffers in two currently open windows."
    (interactive)
    (let ((w1 (current-buffer))
          (w2 (buffer-name (other-window 1))))
      (switch-to-buffer w1)
      (other-window 1)
      (switch-to-buffer w2)
      (other-window 1)))
#+END_SRC
* UI preferences
** Cursor

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC

** Delimiters
*** Highlight matching parentheses

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

*** Rainbow delimiters

Makes delimiters in distinguishable matching colors.

#+BEGIN_SRC emacs-lisp
;; To start rainbow-delimiters-mode in foo-mode
;; (add-hook 'foo-mode-hook #'rainbow-delimiters-mode)

;; To activate rainbow delimiters in most major programming modes
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

*** Smart-parens

For delimiter management.

#+BEGIN_SRC emacs-lisp
  (smartparens-global-mode t)

  ;; Load default configuration
  (require 'smartparens-config)

  (add-hook 'minibuffer-setup-hook 'turn-on-smartparens-strict-mode)

  ;; Keybinding management (from example configuration)
  (define-key smartparens-mode-map (kbd "C-M-f") 'sp-forward-sexp)
  (define-key smartparens-mode-map (kbd "C-M-b") 'sp-backward-sexp)

  (define-key smartparens-mode-map (kbd "C-M-d") 'sp-down-sexp)
  (define-key smartparens-mode-map (kbd "C-M-a") 'sp-backward-down-sexp)
  (define-key smartparens-mode-map (kbd "C-S-d") 'sp-beginning-of-sexp)
  (define-key smartparens-mode-map (kbd "C-S-a") 'sp-end-of-sexp)

  (define-key smartparens-mode-map (kbd "C-M-e") 'sp-up-sexp)
  (define-key smartparens-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)
  (define-key smartparens-mode-map (kbd "C-M-t") 'sp-transpose-sexp)

  (define-key smartparens-mode-map (kbd "C-M-n") 'sp-forward-hybrid-sexp)
  (define-key smartparens-mode-map (kbd "C-M-p") 'sp-backward-hybrid-sexp)

  (define-key smartparens-mode-map (kbd "C-M-k") 'sp-kill-sexp)
  (define-key smartparens-mode-map (kbd "C-M-w") 'sp-copy-sexp)

  (define-key smartparens-mode-map (kbd "M-<delete>") 'sp-unwrap-sexp)
  (define-key smartparens-mode-map (kbd "M-<backspace>") 'sp-backward-unwrap-sexp)

  (define-key smartparens-mode-map (kbd "C-<right>") 'sp-forward-slurp-sexp)
  (define-key smartparens-mode-map (kbd "C-<left>") 'sp-forward-barf-sexp)
  (define-key smartparens-mode-map (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
  (define-key smartparens-mode-map (kbd "C-M-<right>") 'sp-backward-barf-sexp)

  (define-key smartparens-mode-map (kbd "M-D") 'sp-splice-sexp)
  (define-key smartparens-mode-map (kbd "C-M-<delete>") 'sp-splice-sexp-killing-forward)
  (define-key smartparens-mode-map (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
  (define-key smartparens-mode-map (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)

  (define-key smartparens-mode-map (kbd "C-]") 'sp-select-next-thing-exchange)
  (define-key smartparens-mode-map (kbd "C-<left_bracket>") 'sp-select-previous-thing)
  (define-key smartparens-mode-map (kbd "C-M-]") 'sp-select-next-thing)

  (define-key smartparens-mode-map (kbd "M-F") 'sp-forward-symbol)
  (define-key smartparens-mode-map (kbd "M-B") 'sp-backward-symbol)

  (define-key smartparens-mode-map (kbd "C-\"") 'sp-change-inner)
  (define-key smartparens-mode-map (kbd "M-i") 'sp-change-enclosing)


#+END_SRC
** Fonts
Currently, using =DejaVus Sans Mono=.

#+BEGIN_SRC emacs-lisp
  (set-frame-font "-PfEd-DejaVu Sans Mono-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1")
#+END_SRC

** Frame
*** Desktop save mode
#+BEGIN_SRC emacs-lisp
  (desktop-save-mode -1)
#+END_SRC
*** Highlight current line

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
*** Visual line mode

Don't wrap words at end of line.

 #+BEGIN_SRC emacs-lisp
 (global-visual-line-mode 1)
 #+END_SRC
** Frame resizing

Some functions for detecting frame size on startup and for resizing frames.

#+BEGIN_SRC emacs-lisp
  ; Shortcut to reset horizontal frame size to 80 columns
  (defun fix-frame-horizontal-size (width)
    "Set the frame's size to 80 (or prefix arg WIDTH) columns wide."
    (interactive "P")
    (if window-system
	(set-frame-width (selected-frame) (or width 80))
      (error "Cannot resize frame horizontally: is a text terminal")))

  (defun fix-window-horizontal-size (width)
    "Set the window's size to 80 (or prefix arg WIDTH) columns wide."
    (interactive "P")
    (enlarge-window (- (or width 80) (window-width)) 'horizontal))

  (defun fix-horizontal-size (width)
    "Set the window's or frame's width to 80 (or prefix arg WIDTH)."
    (interactive "P")
    (condition-case nil
	(fix-window-horizontal-size width)
      (error
       (condition-case nil
	   (fix-frame-horizontal-size width)
	 (error
	  (error "Cannot resize window or frame horizontally"))))))

  (global-set-key (kbd "C-x W") 'fix-horizontal-size)

  ;; Shortcut to maximize frame width to screen
  (defun calc-max-frame-width ()
      (/ (- (x-display-pixel-width) 18) (frame-char-width)))

  (defun maximize-frame-width ()
    (interactive)
    (if window-system
	(set-frame-width (selected-frame) 'calc-max-frame-width)))

  (global-set-key (kbd "C-x M") 'maximize-frame-width)
#+END_SRC
** Fringe
*** Line numbers

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'nlinum-mode t)
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp
  (defun my-tone-down-fringes ()
    ;; Set fringe color to match background color of theme
    (set-face-attribute 'fringe nil
                        :foreground (face-background 'default)
                        :background (face-background 'default)))

  (my-tone-down-fringes)
  ;  (add-hook 'emacs-startup-hook 'my-tone-down-fringes)
#+END_SRC
** Menu bar
#+BEGIN_SRC emacs-lisp
  ;; Turn off menu bar by default
  (setq menu-bar-mode nil)
#+END_SRC

** Mode line

*** Diminish mode
   :PROPERTIES:
   :ID:       0ffbbcf8-5c2c-4368-a0a2-281563834150
   :END:
Specifies extraneous modes to either hide or abbreviate to reduce clutter from the modeline.
#+BEGIN_SRC emacs-lisp
  (require 'diminish)
  ;; Hide from mode line
  (diminish 'which-key-mode)
  (diminish 'abbrev-mode)
  (diminish 'undo-tree-mode)
  (diminish 'visual-line-mode)
  (diminish 'smartparens-mode)
  (diminish 'org-indent-mode)
  (diminish 'palimpsest-mode "Plmpst")
  (diminish 'abbrev-mode "Abv")
  (diminish 'org-mode)
  (diminish 'evil-org-mode)
  (diminish 'auto-complete-mode)
  (diminish 'projectile-mode)
  (put 'scroll-left 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
** Neotree
#+BEGIN_SRC emacs-lisp
  ;; Neotree toggle button
  (global-set-key [f8] 'neotree-toggle)

  ;; Classic theme
  (setq neo-theme 'ascii)

  ;; Use icons for window system and arrow terminal
  ;(setq neo-theme (if (display-graphic-p) 'icons 'arrow))

  ;; Find current file and jump to that node
  (setq neo-smart-open t)

  ;; Work with projectile to change root automatically
  (setq projectile-switch-project-action 'neotree-projectile-action)

#+END_SRC
** Scrolling
#+BEGIN_SRC emacs-lisp
  ;; scroll one line at a time (less "jumpy" than defaults)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))  ; one line at a time
  (setq mouse-wheel-progressive-speed nil)  ; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't)  ; scroll window under mouse
  (setq scroll-step 1)  ; keyboard scroll one line at a time
  (scroll-bar-mode -1)  ; disable scroll bar
#+END_SRC
** Startup

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)

  (setq initial-scratch-message
        ";;; Blessed art thou, who hath come to the One True Editor.\n\n")
#+END_SRC

** Themes
*** Solarized

#+BEGIN_SRC emacs-lisp
  ;(load-theme 'solarized-dark)
#+END_SRC

*** Zenburn

The one true Emacs theme.

#+BEGIN_SRC emacs-lisp
  (load-theme 'zenburn t)
#+END_SRC

** Tool bar

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (gud-tooltip-mode t)
#+END_SRC

** Turn off alarm bell

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

* Programming customizations
** Bash

Automatically make shell scripts executable upon save.

#+BEGIN_SRC emacs-lisp
   (add-hook 'after-save-hook
      'executable-make-buffer-file-executable-if-script-p)
#+END_SRC
** C
*** Cc-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elpa/cc-mode-5.33")
#+END_SRC
** Debugger
*** C/C++
#+BEGIN_SRC emacs-lisp
(setq gdb-command-name "/usr/local/bin/gdb")
#+END_SRC

*** Python
#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat "/home/zdm/anaconda3/bin/python3" (getenv "PATH")))
  (setenv "PATH" (concat "/home/zdm/anaconda3/bin/ipython" (getenv "PATH")))

  (setq exec-path (split-string (getenv "PATH") path-separator))
  (setq realgud:pdb-command-name "python3 -m pdb")
#+END_SRC
** Javascript
*** js2
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js\\'". js2-mode))
(add-hook 'js-mode-hook 'js2-minor-mode)

;; ac-js2 for JavaScript autocompletion
(add-hook 'js2-mode-hook 'ac-js2-mode)
#+END_SRC
** Lilypond
#+BEGIN_SRC emacs-lisp
  (setq load-path (append (list (expand-file-name
  "/usr/local/lilypond/usr/share/emacs/site-lisp")) load-path))
  (autoload 'LilyPond-mode "lilypond-mode" "LilyPond Editing Mode" t)
  (add-to-list 'auto-mode-alist '("\\.ly$" . LilyPond-mode))
  (add-to-list 'auto-mode-alist '("\\.ily$" . LilyPond-mode))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)

  ;; Diff-hl: highlights uncommitted changes (git)
  (require 'diff-hl)
#+END_SRC
** MATLAB
#+BEGIN_SRC emacs-lisp
  (setq matlab-shell-command "/usr/local/MATLAB/R2017b/bin/matlab")
  (setq matlab-shell-command-switches (list "-nodesktop"))

  ;; Replicate C-c termination
  (defun my-matlab-shell-mode-hook ()
    (global-set-key "C-c" 'interrupt-process))

  (add-hook 'matlab-shell-hook 'my-matlab-shell-hook)

  ;; Turn on programming minor modes
  (defun my-matlab-mode-hook ()
    (nlinum-mode 1)
    (rainbow-delimiters-mode 1)
    (auto-complete-mode 1))

  (add-hook 'matlab-mode-hook 'my-matlab-mode-hook)

  ;; Add Matlab to Emacs environment path
  (setenv "PATH" (concat "/usr/local/MATLAB/R2017b/bin/matlab" (getenv "PATH")))
  (setenv "PATH" (concat
                  "/usr/local/MATLAB/R2017b/bin/glnxa64/MATLAB"
                  (getenv "PATH")))
  (setenv "MATLABCMD" "/usr/local/MATLAB/R2017b/bin/glnxa64/MATLAB")

#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(projectile-mode)
#+END_SRC
** Python
*** Python 3 compatibility and Elpy
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (elpy-enable)

  ;; Use python3 with ipython
  ;;(setq elpy-rpc-python-command "python3")
  (setq elpy-rpc-python-command "/home/zdm/anaconda3/bin/python3")
  (setq elpy-syntax-check-command "/home/zdm/anaconda3/bin/flake8")
  (setq python-shell-interpreter "/home/zdm/anaconda3/bin/ipython"
        python-shell-interpreter-args "-i --simple-prompt --pprint")

  ;; PDB
  (setq gud-pdb-command-name "python3 -m pdb")

  ;; Environment set up (from ipython.org documentation)
  (defvar server-buffer-clients)
  (when (and (fboundp 'server-start) (string-equal (getenv "TERM") 'xterm))
    (server-start)
    (defun fp-kill-server-with-buffer-routine ()
      (and server-buffer-clients (server-done)))
    (add-hook 'kill-buffer-hook 'fp-kill-server-with-buffer-routine))
#+END_SRC
*** Delete trailing whitespace when saving file
#+BEGIN_SRC emacs-lisp
  ;; Before save
  (add-hook 'before-save-hook
            (lambda ()
              (when 'elpy-mode
                (delete-trailing-whitespace))))

#+END_SRC
*** Code folding
#+BEGIN_SRC emacs-lisp
  (add-hook 'elpy-mode-hook 'hs-minor-mode)
#+END_SRC
*** ipython and jupyter in org-mode

#+BEGIN_SRC emacs-lisp
  ;; Hack to execute ipython src blocks in org-mode
  ;; https://emacs.stackexchange.com/questions/30082/your-python-shell-interpreter-doesn-t-seem-to-support-readline#30970

  (setq python-shell-prompt-detect-failure-warning nil)

  (with-eval-after-load 'ipython
    (defun python-shell-completion-native-try ()
      "Return non-nil if can trigger native completion."
      (let ((python-shell-completion-native-enable t)
            (python-shell-completion-native-output-timeout
             python-shell-completion-native-try-output-timeout))
        (python-shell-completion-native-get-completions
         (get-buffer-process (current-buffer))
         nil "_"))))
#+END_SRC
*** ox-ipynb

Add J. Kitchin's =ox-ipynb= export functionality to export org-mode files as jupyter notebooks.

#+BEGIN_SRC emacs-lisp
  ;(load-file "/home/zdm/Lab/Tools/scimax/scimax/ox-ipynb/ox-ipynb.el")
#+END_SRC
*** Tabs and spaces
Make tabs/spaces consistent across modes.

#+BEGIN_SRC emacs-lisp
  (add-hook 'elpy-mode-hook
        (lambda ()
          (setq-default indent-tabs-mode nil)
          (setq-default tab-width 4)
          (setq-default python-indent 4)))
#+END_SRC
** R
*** ESS for working with R in Emacs
#+BEGIN_SRC emacs-lisp
  (load "ess-site")

  ;; Hook some useful programming minor modes
  (add-hook 'ess-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'ess-mode-hook #'nlinum-mode)

  (setq ess-use-auto-complete nil)
#+END_SRC
** TeX
*** AucTeX
  Configure for Latex export with =minted=.
  #+BEGIN_SRC emacs-lisp
    (setq LaTeX-command-style '(("" "%(PDF)%(latex) -shell-escape %S%(PDFout)")))
  #+END_SRC
*** RefTeX + Org-mode
 #+BEGIN_SRC emacs-lisp
   (defun org-mode-reftex-setup ()
   (load-library "reftex")
   (and (buffer-file-name)
   (file-exists-p (buffer-file-name))
   (reftex-parse-all))
   (define-key org-mode-map (kbd "C-c )") 'reftex-citation))
   (add-hook 'org-mode-hook 'org-mode-reftex-setup)
 #+END_SRC
* Evil mode
** Custom functions
#+BEGIN_SRC emacs-lisp
  (defun evil-newline ()
    "Create new line without leaving Normal mode"
    (interactive)
    (save-excursion
    (end-of-line)
    (newline)))
#+END_SRC
** Packages
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
#+END_SRC
** Leader key
Needs to be enabled before evil, otherwise it won't be enabled in initial buffers.

#+BEGIN_SRC emacs-lisp
(global-evil-leader-mode)
#+END_SRC

Leader key default is =\=. =,= is also popular, but I prefer using =SPC=.
#+BEGIN_SRC emacs-lisp
(evil-leader/set-leader "<SPC>")
#+END_SRC
** Leader keymaps
Some custom evil-leader keymaps that I frequently use.
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    ;; 0-9
    "0" 'delete-window
    "1" 'delete-other-windows

    ;; Symbols
    "=" 'zdm-org-verbatim
    "/" 'zdm-org-emph
    "(" 'begin-src-emacs-lisp
    "[" 'org-checkboxify
    "RET" 'eval-buffer
    "<SPC>" 'zdm-insert-literal-space
    "`" 'zdm-swap-windows

    ;; A-Z
    "B" 'ibuffer
    "E" 'sudo-edit
    "H" 'hs-toggle-hiding
    "I" 'ess-indent-command
    "K" 'zdm-kill-buffer-other-window
    "M" 'toggle-frame-maximized
    "R" 'helm-register
    "S" 'delete-trailing-whitespace
    "T" 'eshell
    "V" 'interleave-mode
    "W" 'helm-man-woman

    ;; a-z
    "a" 'org-agenda
    "b" 'helm-buffers-list                ; for ido-mode: 'switch-to-buffer
    "c" 'ledger-mode-clean-buffer
    "d" 'zdm-org-bold
    "e" 'helm-find-files                  ; for ido-mode: 'find-file
    "f" 'other-frame
    "g" 'magit-status
    "h" 'split-window-below
    "i" 'package-install
    "k" 'kill-buffer
    "l" 'evil-org-open-links
    "m" 'helm-bookmarks
    "n" 'nlinum-mode
    "o" 'evil-newline
    "p" 'package-list-packages
    "r" 'helm-multi-files
    "s" 'org-ref-sort-citation-link
    "t" 'neotree-toggle
    "u" 'zdm-org-underline
    "v" 'split-window-right
    "w" 'other-window
    "x" 'mark-done-and-archive
    "y" 'helm-show-kill-ring)
#+END_SRC
** Evil
Default state is evil =<N>=, to make it emacs =<E>=, turn on =(setq evil-default-state 'emacs')=.

#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode 1)

  ;; Return default state to emacs
  ;(setq evil-default-state 'emacs)

  ;; Disable evil mode for these modes/buffers
  (evil-set-initial-state 'help-mode 'emacs)
  (evil-set-initial-state 'dired-mode 'emacs)
  (evil-set-initial-state 'magit-mode 'emacs)
  (evil-set-initial-state 'calendar-mode 'emacs)
  (evil-set-initial-state 'discover-mode 'emacs)
  (evil-set-initial-state 'neotree-mode 'emacs)
  (evil-set-initial-state 'eww-mode-hook 'emacs)
#+END_SRC

Make evil-mode insert state act more like native Emacs.

#+BEGIN_SRC emacs-lisp
  ; redefine emacs state to intercept the escape key like insert-state does:
  (setq evil-insert-state-map (make-sparse-keymap))
  (define-key evil-insert-state-map (kbd "C-[") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)
#+END_SRC
** Evil-org
Uses evil-like keybindings for Org-mode.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/plugins/evil-org-mode")
  (require 'evil-org)
  (add-hook 'org-mode-hook 'evil-org-mode)

  ;; Keybindings
  (evil-org-set-key-theme '(textobjects insert navigation additional shift todo))
#+END_SRC
** Evil-surround
*** Add surrounding
You can surround in visual-state with =S<textobject>= or =gS<textobject>=. Or in normal-state with =ys<textobject>= or =yS<textobject>=

*** Change surrounding
- You can change a surrounding with =cs<old-textobject><new-textobject>=.

*** Delete surrounding
- You can delete a surrounding with =ds<textobject>=.

*** A surround pair is this (trigger char with textual left and right strings):
  - =(?> . ("<" . ">"))=

#+BEGIN_SRC emacs-lisp
  (require 'evil-surround)
  (global-evil-surround-mode 1)

  ;; Fix extra space added when using delimiters
  ;; Use non-spaced pairs when surrounding with an opening brace
  (evil-add-to-alist
   'evil-surround-pairs-alist
   ?\( '("(" . ")")
   ?\[ '("[" . "]")
   ?\{ '("{" . "}")
   ?\) '("( " . " )")
   ?\] '("[ " . " ]")
   ?\} '("{ " . " }"))
#+END_SRC
* Org mode
** Core
*** Default keybindings
  #+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-iswitchb)
  #+END_SRC
** Customizations
*** Agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        (quote
         ("~/Lab/Notebook/leow-lab.org"
          "~/Documents/Personal/personal.org"
          "~/UIC/Logistics/grad-school.org")))
#+END_SRC
*** Blogging
#+BEGIN_SRC emacs-lisp
    ;; Org publish variables
    ;; Copied from: https://bastibe.de/2013-11-13-blogging-with-emacs.html
    (setq org-publish-project-alist
          '(("blog"
             :base-directory "~/Documents/Personal/Blog/org/"
             :html-extension "html"
             :base-extension "org"
             :publishing-directory ""
             :publishing-function (org-html-publish-to-html)
             :recursive t          ; descend into sub-folders?
             :section-numbers nil  ; don't create numbered sections
             :with-toc nil         ; don't create a table of contents
             :with-latex t         ; do use MathJax for awesome formulas!
             :html-head-extra ""   ; extra <head> entries go here
             :html-preamble ""     ; this stuff is put before your post
             :html-postamble ""    ; this stuff is put after your post
             )
            ("images"
             :base-directory "~/Documents/Personal/Blog/org/images/"
             :base-extension "png\\|jpg\\|css"
             :publishing-directory ""
             :recursive t
             :publishing-function org-publish-attachment)
            ("js"
             :base-directory "~/Documents/Personal/Blog/org/js/"
             :base-extension "js"
             :publishing-directory ""
             :publishing-function org-publish-attachment)
            ("css"
             :base-directory "~/Documents/Personal/Blog/org/css/"
             :base-extension "css"
             :publishing-directory ""
             :publishing-function org-publish-attachment)
            ;("rss"
            ; :base-directory "~/Documents/Personal/Blog/org/"
            ; :base-extension "org"
            ; :publishing-directory ""
            ; :publishing-function (org-rss-publish-to-rss)
            ; :html-link-home ""
            ; :html-link-use-abs-url t)
            ("website" :components ("org" "blog" "images" "js" "css"))
  )
  )
#+END_SRC
*** Capture templates
  #+BEGIN_SRC emacs-lisp
    (setq org-default-notes-file "~/Documents/notes.org")
    (setq org-capture-templates
           '(("g"  ; key
              "Grad School"  ; title
              entry  ; type
              (file+headline "/home/zdm/UIC/Logistics/grad-school.org" "Misc") ; file location
              "* TODO %?\n  %i\n")  ; template

             ("l"
              "Lab archive"
              entry
              (file+datetree "/home/zdm/Lab/Notebook/leow-lab.org")
              "* %?\n  %i\n")

             ("L"
              "Lab logistics"
              entry
              (file+headline "/home/zdm/Lab/Notebook/leow-lab.org" "Logistics")
              "* %?\n  %i\n")

             ("e"
              "Lab events"
              entry
              (file+headline "/home/zdm/Lab/Notebook/leow-lab.org" "Events")
              "* %?\n  %i\n")

             ("p"
              "Personal"
              entry
              (file+headline "/home/zdm/Documents/Personal/personal.org" "Miscellaneous")
              "* TODO %?\n  %i\n")))
  #+END_SRC
*** Don't ask to confirm evaluation of source blocks
 #+BEGIN_SRC emacs-lisp
 (setq org-confirm-babel-evaluate nil)
 #+END_SRC
*** Org \LaTeX preview
 #+BEGIN_SRC emacs-lisp
   ;(setq org-preview-latex-default-process 'imagemagick)
   ;(setq org-preview-latex-default-process 'dvipng)
   (setq org-latex-create-formula-image-program 'imagemagick)
 #+END_SRC
*** TODO Org table swap cells
 Swap individual cells in Org tables. Still in progress
 #+BEGIN_SRC emacs-lisp
 ;; Org-table swap cells; needs more work
 ; Swap down
 ;(defun my-org-swap-down ()               ; swap with value below
 ;  (interactive)
 ;  (let ((pos (point))                   ; get current positive
 ;        (v1 (org-table-get-field)))     ; copy current field
 ;    (org-table-blank-field)             ; blank current field
 ;    (org-table-next-row)                ; move cursor down
 ;    (let ((v2 (org-table-get-field)))   ; take copy of that field, too
 ;      (org-table-blank-field)           ; blank that field too
 ;      (insert v1)                       ; insert the value from above
 ;      (goto-char pos)                   ; go to original location
 ;      (insert v2)                       ; insert the value from below
 ;      (org-table-align)                 ; realign the table
 ;      (goto-char pos))))                ; move back to original position
 ;
 ;(global-set-key (kbd "\M-") 'my-org-swap-down) ; keybinding

 ; Swap up
 ; Need a makeshift org-table-previous-row command, since there isn'to one by default
 ;(defun org-table-previous-row () ; This function needs work
 ;Go to the previous row (same column) in the current table.
 ;Before doing so, re-align the table if necessary."
 ;  (interactive)
 ;  (if (and org-table-automatic-realign
 ;	   org-table-may-need-update)
 ;      (org-table-align)
 ;    let ((col (org-table-current-column)))
 ;    (forward-line -1)
 ;    (when (or (not (org-at-table-p))
 ;	    (org-at-table-hline-p))
 ;	(progn
 ;	  (beginning-of-line)))
 ;    (org-table-goto-column col)
 ;    (skip-chars-backward "^/\n\are")
 ;    (when (org-looking-at " ") (forward-char))))
 ;
 ;(defun my-org-swap-up ()                ; swap with value above
 ;  (interactive)
 ;  (let ((pos (point))                   ; get current positive
 ;        (v1 (org-table-get-field)))     ; copy current field
 ;    (org-table-blank-field)             ; blank current field
 ;    (forward-line -1)                   ; move cursor up
 ;    (let ((v2 (org-table-get-field)))   ; take copy of that field, too
 ;      (org-table-blank-field)           ; blank that field too
 ;      (insert v1)                       ; insert the value from above
 ;      (goto-char pos)                   ; go to original location
 ;      (insert v2)                       ; insert the value from above
 ;      (org-table-align)                 ; realign the table
 ;      (goto-char pos))))                ; move back to original position
 ;(global-set-key (kbd "\M-") 'my-org-swap-up) ; keybinding

 ; Swap right
 ;(defun my-org-swap-right ()             ; swap with value to the right
 ;  (interactive)
 ;  (let ((pos (point))                   ; get current positive
 ;        (v1 (org-table-get-field)))     ; copy current field
 ;    (org-table-blank-field)             ; blank current field
 ;    (org-table-next-field)              ; move cursor right
 ;    (let ((v2 (org-table-get-field)))   ; take copy of that field, too
 ;      (org-table-blank-field)           ; blank that field too
 ;      (insert v1)                       ; insert the value from above
 ;      (goto-char pos)                   ; go to original location
 ;      (insert v2)                       ; insert the value from right
 ;      (org-table-align)                 ; realign the table
 ;      (goto-char pos))))                ; move back to original position
 ;(global-set-key (kbd "\M-") 'my-org-swap-right) ;keybinding

 ; Swap left
 ;(defun my-org-swap-left ()               ; swap with value to the left
 ;  (interactive)
 ;  (let ((pos (point))                   ; get current positive
 ;        (v1 (org-table-get-field)))     ; copy current field
 ;    (org-table-blank-field)             ; blank current field
 ;    (org-table-previous-field)          ; move cursor left
 ;    (let ((v2 (org-table-get-field)))   ; take copy of that field, too
 ;      (org-table-blank-field)           ; blank that field too
 ;      (insert v1)                       ; insert the value from left
 ;      (goto-char pos)                   ; go to original location
 ;      (insert v2)                       ; insert the value from below
 ;      (org-table-align)                 ; realign the table
 ;      (goto-char pos))))                ; move back to original position
 ;(global-set-key (kbd "\M-") 'my-org-swap-left) ; keybinding


 #+END_SRC
*** Org-ac
#+BEGIN_SRC emacs-lisp
  ;(require 'org-ac)

  ;; Make config suit for you. About the config item, eval the following sexp.
  ;; (customize-group "org-ac")

  ;(org-ac/config-default)
#+END_SRC
*** Org-babel
  #+BEGIN_SRC emacs-lisp
    ;; Load languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (R . t)
       (emacs-lisp . t)
       (latex . t)
       (matlab . t)
       (js . t)
       (css . t)
       (sh . t)
       (C . t)
       (ledger . t)
       (ipython . t)
       ))

    ;; Remove the need to confirm evaluation of each code block
    (setq org-confirm-babel-evaluate nil)

    ;; Customize default behavior of org-mode code blocks
    ;; so that they can be used to display examples of
    ;; org-mode syntax
    ;(setf org-babel-default-header-args:org '((:exports . "code")))

    ;; Source code syntax highlighting
    (setq org-src-fontify-natively t)

    ;; Source code syntax highlight for PDF export
    (require 'ox-latex)
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)
    (setq org-latex-minted-options
          '(("frame" "lines") ("linenos=true")))

    (setq org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"  ; for org-ref
            "makeindex %b"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

    ;; Open source code buffer in other window
    (setq org-src-window-setup 'other-window)

    ;; Disable src block evaluation on export
    (setq org-export-babel-evaluate nil)

    ;; Set ipython minted same as python
    (add-to-list 'org-latex-minted-langs '(ipython "python"))


    ;; Custom ox-ipynb (John Kitchin)
    ;(setq ox-ipynb "/home/zdm/Programming/Emacs/Elisp/ox-ipynb.el")
    (add-to-list 'load-path "~/Programming/Emacs/Elisp")
    (load "~/Programming/Emacs/Elisp/ox-ipynb.el")
    (require 'ox-ipynb)
  #+END_SRC
*** Org-bookmark-heading
Use to bookmark headings in org-mode
#+BEGIN_SRC emacs-lisp
(require 'org-bookmark-heading)
#+END_SRC
*** Org-bullets
 Single bullets for Org-mode
 #+BEGIN_SRC emacs-lisp

    (require 'org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

    ;; Org-bullets symbol customization:
   ; (setq org-bullets-face-name (quote org-bullet-face))
   (setq org-bullets-bullet-list '("*" "*" "*" "*"))
   ;; Default
   ; (setq org-bullets-bullet-list '("◉" "○" "●" "✸"))
 #+END_SRC
**** Remove bullets
  A cleaner option that removes bullets and instead uses spaces. Using different colors for each subheading makes it easy to identify subheadings quickly
  #+BEGIN_SRC emacs-lisp
  ;(setq org-bullets-bullet-list '("   " "   " "   " "   "))
  #+END_SRC
*** Org-crypt
 For Org mode files, use this as the first line in the file:
 =# -*- mode:org; epa-file-encrypt-to: ("me@mydomain.com") -*-=
 #+BEGIN_SRC emacs-lisp

 (require 'org-crypt)
 (org-crypt-use-before-save-magic)
 (setq org-tags-exclude-from-inheritance (quote ("crypt")))
 (setq org-crypt-key nil)
 ;; GPG key to use for encryption
 ;; Either the Key ID or set to nil to use symmetric encryption.
 (setq auto-save-default nil)
 ;; Auto-saving does not cooperate with org-crypt.el: so you need
 ;; to turn it off if you plan to use org-crypt.el quite often.
 ;; Otherwise, you'll get an (annoying) message each time you
 ;; start Org.
 ;; To turn it off only locally, you can insert this:
 ;;
 ;; # -*- buffer-auto-save-file-name: nil; -*-

 #+END_SRC
*** Org-edit-latex
#+BEGIN_SRC emacs-lisp
(require 'org-edit-latex)
#+END_SRC
*** Org inline image preview
Sets default inline image width smaller to view in frame

#+BEGIN_SRC emacs-lisp
  (setq org-image-actual-width 600)

  ;; Automatically update inline images after executing
  ;; code block

  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+END_SRC
*** Org-ref
**** Base setup
  #+BEGIN_SRC emacs-lisp
    ;(setq org-latex-pdf-process
    ;      '("pdflatex -interaction nonstopmode -output-directory %o %f"
    ;        "bibtex %b"
    ;        "pdflatex -interaction nonstopmode -output-directory %o %f"
    ;        "pdflatex -interaction nonstopmode -output-directory %o %f")
    ;)

    (require 'org-ref)
    (require 'org-ref-wos)
    (require 'org-ref-scopus)
    (require 'org-ref-pubmed)
    (require 'doi-utils)
    (require 'org-ref-pdf)
    (require 'org-ref-latex)
    (require 'org-ref-url-utils)
  #+END_SRC
**** Directories
 #+BEGIN_SRC emacs-lisp
 (setq org-ref-notes-directory "~/Zotero/notes/"
       org-ref-bibliography-notes "~/Zotero/articles.org"
       org-ref-default-bibliography '("~/Zotero/library.bib")
       org-ref-pdf-directory "~/Zotero/articles/")
 #+END_SRC
**** Customizations
#+BEGIN_SRC emacs-lisp
  ;; Custom org-ref-note-title-format for interleaving pdf
  (setq org-ref-note-title-format
  "** TODO %y - %t
  :PROPERTIES:
      :Custom_ID: %k
      :AUTHOR: %9a
      :JOURNAL: %j
      :YEAR: %y
      :VOLUME: %v
      :PAGES: %p
      :DOI: %D
      :URL: %U
      :INTERLEAVE_PDF: /home/zdm/Zotero/archive/
     :END:

    ")
  ; Set hook to nil to allow for custom org-ref-note-title-format
  (setq org-ref-create-notes-hook nil)

  ;; Disable showing broken links to improve speed
  (setq org-ref-show-broken-links nil)
#+END_SRC
*** Other LaTeX classes

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("llncs"
                 "\\documentclass{llncs}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
*** =TODO= keywords
 Sets custom keywords for the todo items
 #+BEGIN_SRC emacs-lisp
 (setq org-todo-keywords
         '((sequence "TODO" "STARTED" "WAITING" "|" "DONE" "DELEGATED")))

 #+END_SRC
*** Logging TODO items
**** =C-c C-x C-s= to mark a todo as done and archive it
#+BEGIN_SRC emacs-lisp
(defun mark-done-and-archive ()
  "Mark the state of an org-mode item as DONE and archive it."
  (interactive)
  (org-todo 'done)
  (org-archive-subtree))

(define-key org-mode-map (kbd "C-c C-x C-s") 'mark-done-and-archive)
#+END_SRC
**** Record the time that a todo was archived
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC
*** Miscellaneous
#+BEGIN_SRC emacs-lisp
  ;; Put captions for tables above the table (APA style)
  (setq org-latex-table-caption-above t)

  ;; Custom org-mode functions

  (defun zdm-org-surround (marker)
    "Macro to surround a single word with 'marker'."
    (interactive)
    (save-excursion
      (skip-chars-backward "-_[:alnum:]")
      (insert marker)
      (skip-chars-forward "_[:alnum:]")
      (insert marker)))

  ;; zdm-org-surround implementations
  (defun zdm-org-underline ()
    "Underline word in org mode."
    (interactive)
    (zdm-org-surround "_"))

  (defun zdm-org-bold ()
    "Bold word in org mode."
    (interactive)
    (zdm-org-surround "*"))

  (defun zdm-org-emph ()
    "Emphasize (italicize) word in org mode."
    (interactive)
    (zdm-org-surround "/"))

  (defun zdm-org-verbatim ()
    "Verbatim word in org mode."
    (interactive)
    (zdm-org-surround "="))


#+END_SRC
* Encryption
** EasyPG
#+BEGIN_SRC emacs-lisp
(require 'epa-file)
(epa-file-enable)
#+END_SRC
** Password generator
Courtesy of HRS
#+BEGIN_SRC emacs-lisp
(defun insert-random-string (len)
  "Insert a random alphanumeric string of length len."
  (interactive)
  (let ((mycharset "1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstyvwxyz!@#$%^&*"))
    (dotimes (i len)
      (insert (elt mycharset (random (length mycharset)))))))

(defun generate-password ()
  "Insert a good alphanumeric password of length 30."
  (interactive)
  (insert-random-string 30))
#+END_SRC
* Ledger mode
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :init
    (setq ledger-clear-whole-transactions nil)

    :config
    (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
    :mode "\\.dat\\'")
#+END_SRC
* Editing settings
** Abbrev-mode
To define a new abbrev:
- Type the word you want to use as expansion and then type =C-x a g= and the abbreviation for it.
  - Example: =t h e C-x a g t e h RET=

#+BEGIN_SRC emacs-lisp
(setq-default abbrev-mode nil)

;; Only on for Org-mode
(add-hook 'org-mode-hook (lambda () (abbrev-mode t)))
(abbrev-mode nil)

;; Disable abbrev-mode in minibuffer
(defun conditionally-disable-abbrev ()
      (abbrev-mode nil))

(add-hook 'minibuffer-setup-hook 'conditionally-disable-abbrev)
#+END_SRC
** Ace jump
#+BEGIN_SRC emacs-lisp
  ;(add-to-list 'load-path "~/.emacs.d/elpa/ace-jump-mode-20140616/ace-jump-mode.el")
  (autoload 'ace-jump-mode "ace-jump-mode" "Emacs quick move minor mode" t)

  ;; You can select the key you prefer to
  (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

  ;; Enable a more powerful jump back function from ace jump mode
  (autoload 'ace-jump-mode-pop-mark "ace-jump-mode" "Ace jump back:-)" t)
  (eval-after-load "ace-jump-mode" '(ace-jump-mode-enable-mark-sync))

  (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
#+END_SRC
** Anchored transpose
Tranposes a selected region of text around a specified anchor point. Select entire region to be transposed, enter =C-x t=, then select anchor region to tranpose the two regions around, then enter =C-x t= again to complete transpose.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elap/anchored-transpose-20080904.2254")
  (require 'anchored-transpose)
  (global-set-key [?\C-x ?t] 'anchored-transpose)
  (autoload 'anchored-transpose "anchored-transpose" nil t)
#+END_SRC
** Browse kill ring
If using Evil mode, use =M-y= while in =Normal= mode.

#+BEGIN_SRC emacs-lisp
(when (require 'browse-kill-ring nil 'noerror)
  (browse-kill-ring-default-keybindings))
#+END_SRC
** Company mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)

  ;; Disable to avoid conflict with elpy
  (add-hook 'elpy-mode-hook (lambda () (company-mode nil)))
#+END_SRC
** Dired+
#+BEGIN_SRC emacs-lisp
  (diredp-toggle-find-file-reuse-dir t)
#+END_SRC
** Dired-X
#+BEGIN_SRC emacs-lisp
(require 'dired-x)
(setq dired-omit-files "^\\...+$")
(add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1))) ; M-o to toggle
#+END_SRC
** [[https://github.com/hrs/engine-mode][Engine mode]]
Use =C-x /= prefix followed by assigned keybinding to call.
#+BEGIN_SRC emacs-lisp
  (require 'engine-mode)
  (engine-mode t)

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine amazon
    "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s"
    :keybinding "a")

  (defengine google-maps
    "http://maps.google.com/maps?q=%s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine youtube
    "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
    :keybinding "y")

  (defengine reddit
    "https://www.reddit.com/search?q=%s&restrict_sr=&sort=relevance&t=all"
    :keybinding "r")

  (defengine ncbi
    "http://www.ncbi.nlm.nih.gov/gquery/?=gquery&term=%s"
    :keybinding "n")

  (defengine scholar
    "https://scholar.google.com/scholar?q=%s"
    :keybinding "s")
#+END_SRC
** EWW
#+BEGIN_SRC emacs-lisp
  ;; Mode for Reddit
  (require 'md4rd)
  ;(md4rd)
#+END_SRC
** Greek letters
Enter Greek letters directly into buffer. Sometimes useful in org instead of \LaTeX commands.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-g a") "α")
(global-set-key (kbd "M-g b") "β")
(global-set-key (kbd "M-g g") "γ")
(global-set-key (kbd "M-g d") "δ")
(global-set-key (kbd "M-g e") "ε")
(global-set-key (kbd "M-g z") "ζ")
(global-set-key (kbd "M-g h") "η")
(global-set-key (kbd "M-g q") "θ")
(global-set-key (kbd "M-g i") "ι")
(global-set-key (kbd "M-g k") "κ")
(global-set-key (kbd "M-g l") "λ")
(global-set-key (kbd "M-g m") "μ")
(global-set-key (kbd "M-g n") "ν")
(global-set-key (kbd "M-g x") "ξ")
(global-set-key (kbd "M-g o") "ο")
(global-set-key (kbd "M-g p") "π")
(global-set-key (kbd "M-g r") "ρ")
(global-set-key (kbd "M-g s") "σ")
(global-set-key (kbd "M-g t") "τ")
(global-set-key (kbd "M-g u") "υ")
(global-set-key (kbd "M-g f") "ϕ")
(global-set-key (kbd "M-g j") "φ")
(global-set-key (kbd "M-g c") "χ")
(global-set-key (kbd "M-g y") "ψ")
(global-set-key (kbd "M-g w") "ω")
(global-set-key (kbd "M-g A") "Α")
(global-set-key (kbd "M-g B") "Β")
(global-set-key (kbd "M-g G") "Γ")
(global-set-key (kbd "M-g D") "Δ")
(global-set-key (kbd "M-g E") "Ε")
(global-set-key (kbd "M-g Z") "Ζ")
(global-set-key (kbd "M-g H") "Η")
(global-set-key (kbd "M-g Q") "Θ")
(global-set-key (kbd "M-g I") "Ι")
(global-set-key (kbd "M-g K") "Κ")
(global-set-key (kbd "M-g L") "Λ")
(global-set-key (kbd "M-g M") "Μ")
(global-set-key (kbd "M-g N") "Ν")
(global-set-key (kbd "M-g X") "Ξ")
(global-set-key (kbd "M-g O") "Ο")
(global-set-key (kbd "M-g P") "Π")
(global-set-key (kbd "M-g R") "Ρ")
(global-set-key (kbd "M-g S") "Σ")
(global-set-key (kbd "M-g T") "Τ")
(global-set-key (kbd "M-g U") "Υ")
(global-set-key (kbd "M-g F") "Φ")
(global-set-key (kbd "M-g J") "Φ")
(global-set-key (kbd "M-g C") "Χ")
(global-set-key (kbd "M-g Y") "Ψ")
(global-set-key (kbd "M-g W") "Ω")
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  ;; 'M-x helm-M-x RET helm-' lists helm commands ready for narrowing and selecting.
  ;; To bind to M-x:
  (global-set-key (kbd "M-x") 'helm-M-x)
  (require 'helm-config)

  ;; Helm keybindings
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)

  (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
#+END_SRC

#+RESULTS:
: helm-config

*** Helm-bibtex
#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-bibliography "~/Zotero/library.bib"
      helm-bibtex-library-path "~/Zotero/articles"
      helm-bibtex-notes-path "~/Zotero/articles.org")
(setq  helm-bibtex-pdf-field "file")
#+END_SRC
*** Helm-projectile
#+BEGIN_SRC emacs-lisp
;; (setq helm-projectile-fuzzy-match nil)
(require 'helm-projectile)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
#+END_SRC
*** Helm-swoop
#+BEGIN_SRC emacs-lisp
  ;; Change the keybinds to whatever you like :)
  (global-set-key (kbd "M-i") 'helm-swoop)
  (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
  (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
  (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)

  ;; When doing isearch, hand the word over to helm-swoop
  (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  ;; From helm-swoop to helm-multi-swoop-all
  (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
  ;; When doing evil-search, hand the word over to helm-swoop
  ;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)

  ;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
  (define-key helm-swoop-map (kbd "M-m") 'helm-multi-swoop-current-mode-from-helm-swoop)

  ;; Move up and down like isearch
  (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
  (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)

  ;; Save buffer when helm-multi-swoop-edit complete
  (setq helm-multi-swoop-edit-save t)

  ;; If this value is t, split window inside the current window
  (setq helm-swoop-split-with-multiple-windows nil)

  ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
  (setq helm-swoop-split-direction 'split-window-vertically)

  ;; If nil, you can slightly boost invoke speed in exchange for text color
  (setq helm-swoop-speed-or-color nil)

  ;; ;; Go to the opposite side of line from the end or beginning of line
  (setq helm-swoop-move-to-line-cycle t)

  ;; Optional face for line numbers
  ;; Face name is `helm-swoop-line-number-face`
  (setq helm-swoop-use-line-number-face t)

  ;; If you prefer fuzzy matching
  (setq helm-swoop-use-fuzzy-match t)
#+END_SRC
** Ibuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-default-sorting-mode 'major-mode)
#+END_SRC
** Macros
- Begin macro: =f3= or =C-x (=
- End macro: =f4= or =C-x )=
- Name macro: =M-x name-last-kbd-macro=
- Paste macro into .emacs: =M-x insert-kbd-macro RET <macro-name> RET=
*** Org-mode
**** *Bold* word at point
#+BEGIN_SRC emacs-lisp
(fset 'evil-org-bold-word
   [?i ?* escape ?e ?a ?* escape ?B])
#+END_SRC
**** /Emphsize/ word at point
#+BEGIN_SRC emacs-lisp
(fset 'evil-org-emph-word
   [?i ?/ escape ?e ?a ?/ escape ?B])
#+END_SRC
**** Org-ref search and sort citations
#+BEGIN_SRC emacs-lisp
(fset 'org-ref-search-sort-citations
   [?/ ?c ?i ?t ?e ?: return ?  ?s ?n])

#+END_SRC
**** =Verbatim= word at point
#+BEGIN_SRC emacs-lisp
(fset 'evil-org-verbatim-word
   [?i ?= escape ?E ?a ?= escape ?B])
#+END_SRC
**** Begin source emacs-lisp
#+BEGIN_SRC emacs-lisp
  (fset 'begin-src-emacs-lisp
     [?i ?< ?s tab ?e ?m ?a ?c ?s ?- ?l ?i ?s ?p escape ?0 ?j ?i])
#+END_SRC

**** Org-checkboxify
Convert plain list to checkboxes. Call with C-u prefix for # of lines
#+BEGIN_SRC emacs-lisp
(fset 'org-checkboxify
   [?i ?- ?  ?\[ ?  ?\C-f ?  escape ?F ?- ?j])
#+END_SRC
*** Insert literal space
#+BEGIN_SRC emacs-lisp
    ;; Macro for literal space
    (fset 'insert-utf8-space
       [?i ?\C-x ?8 ?  ?\C-f backspace escape])


#+END_SRC
** ODT to Word conversion
#+BEGIN_SRC emacs-lisp
  (setq org-odt-preferred-output-format "doc")
#+END_SRC
** Palimpsest mode
Enter keybinding to move selected text to the bottom of the current buffer. Useful for prose text that you don't need but don't want to delete yet.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'palimpsest-mode)
#+END_SRC
** Ranger
Alternative to Dired and uses vim-like keybindings.

#+BEGIN_SRC emacs-lisp
  ;; Hide dotfiles by default
  (setq ranger-show-dotfiles nil)
#+END_SRC
** Root permissions
#+BEGIN_SRC emacs-lisp
  (defun sudo-edit (&optional arg)
    "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

#+END_SRC
** Set yes/no prompts to just y/n
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Spaces after periods
Set sentences to be a period (full-stop) followed by one space.
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC
** Spellcheck
Use =flyspell= for spell-checking in org-mode.

#+BEGIN_SRC emacs-lisp
  (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
  (add-hook 'org-mode-hook 'flyspell-mode t)
  (add-hook 'org-mode-hook 'flyspell-buffer)
#+END_SRC
** Temporary files
Allocates all temporary files to a 'backup' directory
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/Documents/Emacs-temp-files"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )

#+END_SRC
** Yasnippet
Used for autocompletion of templates (similar to =abbrev-mode=, but for programming).

#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
#+END_SRC
